name: react-starter-kit
git_url: 'git://github.com/songzhengxu/react-starter-kit.git'
author: songzhengxu
description: >-
  基于webpack2 + ES6/7 + less + React15.5 + Redux3.6 + React-Router4.0 +
  react-hot-loader3 + antd
tags:
  - react
  - redux
  - webpack2
  - babel
  - antd
  - react-hot-loader3
  - react-router4
coverPicture: 'https://ucarecdn.com/3ee0a4a1-aa69-46a0-9a0b-69d51a791dec/'
readme: "react-starter-kit\n=================\n\n基于webpack2 + ES6/7 + less + React15.5 + Redux3.6 + React-Router4.0 + react-hot-loader3 + antd\n\n> 这个脚手架工程模板用于快速启动基于 React + Webpack 为技术栈的前端项目\n\n---\n\n更新日志\n--------\n\n20170814\n--------\n\n-\t1.引入CSS Modules 且分离antd的less不走CSS Modules编译\n\n20170803\n--------\n\n-\t1.加入babel-polyfill\n-\t2.修复cross-env 未生效的bug\n-\t3.加入stage-2支持，用es2017的语法解决react bind this的问题，\n\n> 详细见 src\\Component\\From.jsx 中的代码，直接用stage-2的写法，事件不用再绑定this;\n\n20170725\n--------\n\n-\t1.使用cross-env来设置跨平台设置环境变量\n-\t2.统一window,mac的开发运行命令\n-\t3.配置允许局域网访问 http://ip:port\n\n20170719\n--------\n\n-\t1.移除react-intl国际化需求\n-\t2.严格按照Angular 规范书写Commit message\n\n20170710\n--------\n\n-\t1.语法检查严格按照airbnb规范\n-\t2.路由代码拆分，实现页面[按需加载](https://reacttraining.cn/web/guides/code-splitting)\n\n> 1.语法检查严格是好事，至少能够按照规则写出规范的代码，看着都很舒心，慢慢的就会接受并习惯它，但是也不能完全按照它的规范来，以免适得其反，都可以通过配置文件忽略某些规则，或者跳过某些文件，代码行等，这样下来，才有一套自己的代码规范 2.路由实现代码拆分以后，打包的文件小了，打包的时间也少了，打包时间优化从71s-36s-17s. 优化从未停止！\n\n20170707\n--------\n\n-\t1.组件拆分为容器组件和视图组件\n-\t2.新增react-intl来达到国际化多语言\n\n> 拆分容器组件和视图组件，能让我们更好的进行组件的代码复用，叫法挺多的，什么智能组件和木偶组件，容器组件和展示组件\n\nFeatures 功能特性\n-----------------\n\n-\t自动化流程\n\n\t-\t可以解析 JSX 语法\n\t-\t可以解析 ES6/ES7 语法新特性\n\t-\t支持 LESS 预处理器\n\t-\t区分开发环境和生产环境,代码中插入环境变量\n\t-\t分离业务功能代码和公共依赖代码，单独打包第三方库\n\t-\t支持编译 HTML 模板\n\t-\t支持图片、图标字体等资源的编译\n\t-\t自动补全文件后缀\n\t-\t指定静态资源的url路径前缀--静态资源上cdn必备\n\t-\t简化import路径\n\t-\t配置favicon\n\t-\t使用webpack 2自带的ES6模块处理功能(禁用了-可配置)\n\t-\t编译前清空dist目录\n\n-\t开发流程\n\n\t-\t实时的语法检测，基于airbnb/react -可配置编辑器\n\t-\t实现组件级热更新\n\t-\t实现代码的热替换，浏览器实时刷新查看效果\n\t-\t编译完成自动打开浏览器\n\n-\t打包流程\n\n\t-\t支持文件 MD5 戳,解决文件缓存问题\n\t-\tCSS3 使用autoprefixer自动补全前缀\n\t-\t支持一行命令产出待部署资源\n\t-\t单独分离 CSS 样式文件(开发环境不分离-分离后不支持css的热更新)\n\n-\t测试任务\n\n\t-\t支持 mocha 测试用例运行\n\t-\t支持react官方工具库react-dom/test-utils的单元测试\n\t-\t支持Enzyme的react-redux的测试\n\t-\t支持Istanbul 覆盖率测试\n\n---\n\n快速开始\n--------\n\n```\n$ git clone https://github.com/songzhengxu/react-starter-kit.git\n$ cd react-starter-kit\n$ npm install\n```\n\n#### 2.1 开发调试\n\n```\n//启动项目\n$ npm run dev\n```\n\n将自动打开浏览器`http://127.0.0.1:3000`\n\n#### 2.2 代码检查\n\n```\n$ 编译和打包都会自动运行代码检查\n  也可以配置编辑器,在编码时实时检查语法 如: atom需要安装linter和linter-eslint这两个插件, 装好后重启生效.\n```\n\n> 注意：如果有语法错误，则浏览器控制台会报errors，则热替换不会生效，切记！\n\n#### 2.3 测试用例\n\n```\n$ npm run test \t\t\t\t// 运行单元测试\n$ npm run coverage \t\t// 运行覆盖率测试\n```\n\n> 单元测试在控制台输出报告，覆盖率测试将在项目根目录中创建coverage文件夹来输出测试报告， 进入coverage/lcov-report 中，打开index.html 能够在浏览器中查看更加详细的覆盖率测试报告\n\n#### 2.4 产出资源\n\n```\n$ npm run build\n```\n\n导出的代码在项目根目录中\n\n---\n\n目录结构\n--------\n\n```\nreact-starter-kit/\n├─src                 // 源文件目录\n│  ├─Action     \n│  ├─Assets           // 图片资源\n│  ├─Component\n│  │  └─Common\n│  ├─Config\n│  ├─Iconfont         // 字体\n│  ├─Reducer\n│  ├─Style\n│  ├─Template         // html模板\n│  └─utils\n└─test                // 测试用例目录\n    ├─Action\n    ├─Component\n    └─Reducer\n```\n\n---\n\n技术栈\n------\n\n1.\t[x] [Webpack](https://webpack.github.io)\n2.\t[x] [React](https://facebook.github.io/react/)\n3.\t[x] [ES6](http://es6.ruanyifeng.com/)\n4.\t[x] [Redux](https://github.com/rackt/redux)\n5.\t[x] [React-router](https://github.com/rackt/react-router-redux)\n6.\t[x] [Babel](https://babeljs.io/)\n7.\t[x] [Autoprefixer](https://github.com/postcss/autoprefixer)\n8.\t[x] [PostCSS](https://github.com/postcss/postcss)\n9.\t[x] [CSS modules](https://github.com/outpunk/postcss-modules)\n10.\t[x] [Less](https://github.com/less/less.js)\n11.\t[x] [Eslint](https://github.com/eslint/eslint)\n\n---\n\n待解决的问题\n------------\n\n-\t使用webpack 2自带的ES6模块处理功能与mocha测试配置冲突 (已解决)\n\n> 引起冲突的原因： webpack hot-module-replacement需要利用es6 import，因此我们需要在presets选项里面将es2015的modules选项设置为false,默认为commonjs 但是mocha测试(在Node运行环境下)的时候需要想import 转为为commonjs风格的require 解决方法： 利用babel在不同环境变量的情况下读取不同options的特性 测试的时候，将临时环境变量设置为test, 在babelrc文件里面的env选项下，配置好环境变量为test的时候需要使用的presets和plugins 开发的时候，将临时环境变量设置为development, 在没有配置的情况狂下，babelrc默认的环境变狼为development\n\n-\t带有路由的组件，在mocha测试时，不能渲染到dom (已解决)\n\n> 组件带有路由的情况下需要将组件包裹在 <MemoryRouter>里面，直接放到测试中运行。 而不是用<MemoryRouter>生成新的组件后再放到测试中运行。具体查看测试用例\n\n-\tredux组件在mocha测试时，不能渲到dom (已解决)\n\n> 可以通过自己创建一个store,创建store的时候，即使只有一个reducer也要用combineReducers包裹好再创建。 创建好store后，利用<Provider>生成一个组件，放到测试中即可。\n\n-\tjsdom8.0.1升级到jsdom10.1.0 (已解决)\n\n> jsdom10.1.0相对于8.0.1来说，更改了部分api，根据官网api，修改setup.js即可。 setup.js： https://github.com/lelandrichardson/enzyme-example-mocha/blob/master/test/.setup.js jsdom 10.1.0： https://github.com/tmpvar/jsdom\n\n-\t当引入less时，mocha测试报错,\n\n> 由于antd的模块配置是使用less按需加载，所以是动态引入less文件，以及我们自己引入的less文件，组件都不能通过测试，我们需要配置mocha 忽略less 文件\n\nInstall it:\n\n```js\nnpm install --save-dev ignore-styles\n```\n\nRun tests without styles:\n\n```js\nmocha --require ignore-styles\n```\n\n-\t简化import路径 mocha测试不能识别 - ---\n\n> 使用 babel-plugin-module-resolver 解决\n"
deployedAt: 2018-08-15T02:52:43.003Z
